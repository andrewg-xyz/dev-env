#STIG10.14 MACOS
fail="---FAIL---"
pass="---PASS---"
invalid="---INVALID---"
#CAT 1/High
echo "---------------------------------------------------------"
echo                       "CAT 1/High" 
echo "---------------------------------------------------------"
#V-95385 The macOS system must be integrated into a directory services #infrastructure.
echo "V-95385" 
#If the system is using a mandatory Smart Card Policy, this is Not Applicable. 
#To determine if the system is integrated to a directory service, ask the System Administrator (SA) or Information System Security Officer (ISSO) or run the following command:

scanout="$(/usr/bin/sudo dscl localhost -list . | /usr/bin/grep -vE '(Contact | Search | Local)')"

if [ -z "$scanout" ]; then
    echo "$fail"
else
    echo "$pass"
fi

scanout=""

#If nothing is returned, or if the system is not integrated into a directory service infrastructure, this is a finding.
#Fix Text: Integrate the system into an existing directory services infrastructure

#----------------------------------------------------------------------
#95543
echo "V-95543"
#Check Text: Ask the System Administrator (SA) or Information System Security Officer (ISSO) if an approved antivirus solution is loaded on the system. The antivirus solution may be bundled with an approved host-based security solution.
#If there is no local antivirus solution installed on the system, this is a finding.
#Fix Text: Install an approved antivirus solution onto the system.


#----------------------------------------------------------------------
#V-95587 The macOS system must be configured with the sudoers file #configured #to authenticate users on a per -tty basis.
echo "V-95587"
#Check Text: To check if the "tty_tickets" option is set for "/usr/bin/sudo", run the following command:

scanout="$(/usr/bin/sudo /usr/bin/grep tty_tickets /etc/sudoers)"

if [ -z "$scanout" ]; then
    echo "$fail"
else
    echo "$pass"
fi

scanout=""

#If there is no result, this is a finding.
#Fix Text: Edit the "/etc/sudoers" file to contain the line:
#Defaults tty_tickets----this line can be placed in the defaults section or at the end of the file.

#----------------------------------------------------------------------
#V-95803 The macOS system must implement DoD-approved encryption to #protect #the confidentiality and integrity of remote access sessions #including #transmitted data and data during preparation for #transmission.
echo "V-95803"
#Check Text: For systems that allow remote access through SSH, run the following command:


scanout="$(/usr/bin/sudo /bin/launchctl print-disabled system | /usr/bin/grep com.openssh.sshd)"

if [ -z "$scanout" ]; then
    echo "$fail"
else
    echo "$pass"
fi

scanout=""



#If the results do not show the following, this is a finding.
#"com.openssh.sshd" => false
#Fix Text: To enable the SSH service, run the following command:
#/usr/bin/sudo /bin/launchctl enable system/com.openssh.sshd
#The system may need to be restarted for the update to take effect


#----------------------------------------------------------------------
#V-95927 
echo "V-95927"
#Check Text: To check if the tfptd service is disabled, run the following command:


scanout="$(sudo launchctl print-disabled system | grep tftpd)"

if [ -z "$scanout" ]; then
    echo "$fail"
else
    echo "$pass"
fi

scanout=""

#If the results do not show the following, this is a finding:
#"com.apple.tftpd" => true
#Fix Text: To disable the tfpd service, run the following command:
#/usr/bin/sudo /bin/launchctl disable system/com.apple.tftpd


#----------------------------------------------------------------------
#V-95949
echo "V-95949"
#Check Text: To check that the system is configured to disable the guest account, run the following command:


scanout="$(/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep DisableGuestAccount)"

if [ -z "$scanout" ]; then
    echo "$fail"
else
    echo "$pass"
fi

scanout=""

#If the result is null or not "DisableGuestAccount = 1", this is a finding.
#Fix Text: This is managed with Login Window Policy.


#----------------------------------------------------------------------
#V-95951
echo "V-95951"
#Check Text: To check the status of the Security assessment policy subsystem, run the following command:


scanout="$(/usr/bin/sudo /usr/sbin/spctl --status | /usr/bin/grep enabled)"

if [ -z "$scanout" ]; then
    echo "$fail"
else
    echo "$pass"
fi

scanout=""

#If nothing is returned, this is a finding.
#Fix Text: To enable the Security assessment policy subsystem, run the following command:
#/usr/bin/sudo /usr/sbin/spctl --master-enable


#----------------------------------------------------------------------
#V-95957
echo "V-95957"
#Check Text: To view a list of installed certificates, run the following command:

/usr/bin/sudo /usr/bin/security dump-keychain | /usr/bin/grep labl | awk -F\" '{ print $4 }'
scanout="$( )"

if [ -z "$scanout" ]; then
    echo "$fail"
else
    echo "$pass"
fi

scanout=""

#If this list does not contain approved certificates, this is a finding.
#Fix Text: Obtain the approved DOD certificates from the appropriate authority. Use Keychain Access from "/Applications/Utilities" to add certificates to the System Keychain.

#----------------------------------------------------------------------
#CAT 2/Medium
echo "---------------------------------------------------------"
Echo                      "CAT 2/Medium"
echo "---------------------------------------------------------"

#V-95377  
echo "V-95377"
#Check Text: To verify that the installed version of SSH is correct, run the following command:

ssh -V
echo "---------------------------------------------------------"
#If the string that is returned does not include "OpenSSH_7.9p1" or greater, this is a finding.
#To check if the "SSHD" service is enabled, use the following commands:

/usr/bin/sudo launchctl print-disabled system | grep sshd
echo "---------------------------------------------------------"
#If the results do not show "com.openssh.sshd => false", this is a finding.
#To check that "SSHD" is currently running, use the following command:

/usr/bin/sudo launchctl print system/com.openssh.sshd
echo "---------------------------------------------------------"
#If the result is the following, "Could not find service "com.openssh.sshd" in domain for system", this is a finding.
#Fix Text: To update SSHD to the minimum required version, run Software Update to update to the latest version of macOS.
#To enable the SSHD service, run the following command:
#/usr/bin/sudo /bin/launchctl enable system/com.openssh.sshd
#The system may need to be restarted for the update to take effect.


#----------------------------------------------------------------------
#V-95393 The macOS system must enforce the limit of three consecutive invalid logon #        attempts by a user before the user account is locked.
echo "V-95393"
#Check Text: Password policy can be set with a configuration profile or the "pwpolicy" utility. If password policy is set with a configuration profile, run the following command to check if the system has the correct setting for the number of permitted failed logon attempts and #the logon reset timer:

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep 'maxFailedAttempts\|minutesUntilFailedLoginReset'

#If "maxFailedAttempts" is not set to "3" and "minutesUntilFailedLoginReset" is not set to "15", this is a finding.
#If password policy is set with the "pwpolicy" utility, the variable names may vary depending on how the policy was set. To check if the password policy is configured to disable an account for 15 minutes after 3 unsuccessful logon attempts, run the following command to output the #password policy to the screen:
echo "---------------------------------------------------------"
/usr/bin/sudo /usr/bin/pwpolicy getaccountpolicies

#Look for the line "<key>policyCategoryAuthentication</key>".
#If this does not exist, and password policy is not controlled by a directory service, this is a finding.
#In the array that follows, there should be one or more <dict> sections that describe policy checks. One should contain a <string> that allows users to log on if "policyAttributeFailedAuthentications" is less than "policyAttributeMaximumFailedAuthentications". Under #policyParameters, "policyAttributeMaximumFailedAuthentications" should be set to "3".
#If "policyAttributeMaximumFailedAuthentications" is not set to "3", this is a finding.
#In the same check or in another <dict> section, there should be a <string> that allows users to log on if the "policyAttributeCurrentTime" is greater than the result of adding "15" minutes (900 seconds) to "policyAttributeLastFailedAuthenticationTime". The check might use a #variable defined in its "policyParameters" section.
#If the check does not exist or if the check adds too great an amount of time, this is a finding.
#
#Fix Text: This setting may be enforced using the "Passcode Policy" configuration profile or by a directory service.
#To set the passcode policy without a configuration profile, run the following command to save a copy of the current "pwpolicy" account policy file:
#/usr/bin/sudo /usr/bin/pwpolicy getaccountpolicies | tail -n +2 > pwpolicy.plist
#Open the generated file in a text editor and ensure it contains the following text after the opening <dict> tag and before the closing </dict> tag.
#
#Replace <dict/> first with <dict></dict> if necessary.
#<key>policyCategoryAuthentication</key>
#<array>
#<dict>
#<key>policyContent</key>
#<string>(policyAttributeFailedAuthentications < policyAttributeMaximumFailedAuthentications) OR (policyAttributeCurrentTime > (policyAttributeLastFailedAuthenticationTime + autoEnableInSeconds))</string>
#<key>policyIdentifier</key>
#<string>Authentication Lockout</string>
#<key>policyParameters</key>
#<dict>
#<key>autoEnableInSeconds</key>
#<integer>900</integer>
#<key>policyAttributeMaximumFailedAuthentications</key>
#<integer>3</integer>
#</dict>
#</dict>
#</array>
#
#If the line "<key>policyCategoryAuthentication</key>" already exists, the following text should be used instead and inserted after the first <array> tag that follows it:
#<dict>
#<key>policyContent</key>
#<string>(policyAttributeFailedAuthentications < policyAttributeMaximumFailedAuthentications) OR (policyAttributeCurrentTime > (policyAttributeLastFailedAuthenticationTime + autoEnableInSeconds))</string>
#<key>policyIdentifier</key>
#<string>Authentication Lockout</string>
#<key>policyParameters</key>
#<dict>
#<key>autoEnableInSeconds</key>
#<integer>900</integer>
#<key>policyAttributeMaximumFailedAuthentications</key>
#<integer>3</integer>
#</dict>
#</dict>
#
#After saving the file and exiting to the command prompt, run the following command to load the new policy file:
#
#/usr/bin/sudo /usr/bin/pwpolicy setaccountpolicies pwpolicy.plist
#
#Note: Updates to passcode restrictions must be thoroughly evaluated in a test environment. Mistakes in configuration or bugs in OS X may block password change and local user creation operations, as well as lock out all local users, including administrators.

#----------------------------------------------------------------------
#V-95405	
echo "V-95405"

#Check Text: To verify that the installed version of SSH is correct, run the following command:

ssh -V
echo "---------------------------------------------------------"
#If the string that is returned does not include "OpenSSH_7.9p1" or greater, this is a finding.
#To check if the "SSHD" service is enabled, use the following commands:

/usr/bin/sudo launchctl print-disabled system | grep sshd
echo "---------------------------------------------------------"
#If the results do not show "com.openssh.sshd => false", this is a finding.
#To check that "SSHD" is currently running, use the following command:

/usr/bin/sudo launchctl print system/com.openssh.sshd

#If the result is the following, "Could not find service "com.openssh.sshd" in domain for system", this is a finding.
#
#Fix Text: To update SSHD to the minimum required version, run Software Update to update to the latest version of macOS.
#To enable the SSHD service, run the following command:
#
#/usr/bin/sudo /bin/launchctl enable system/com.openssh.sshd
#
#The system may need to be restarted for the update to take effect.

#----------------------------------------------------------------------
#V-95407
echo "V-95407"
#Check Text: To verify that SSHD is limited to 10 sessions, use the following command:

/bin/cat /etc/ssh/sshd_config | grep MaxSessions

#The command must return "MaxSessions 10". If it returns null, or a commented value, or the value is greater than "10", this is a finding.
#
#Fix Text: To configure SSHD to limit the number of sessions, use the following command:
#
#/usr/bin/sudo /usr/bin/sed -i.bak 's/^[\#]*MaxSessions.*/MaxSessions 10/' /etc/ssh/sshd_config

#----------------------------------------------------------------------
#V-95437
echo "V-95437"
#Check Text: The check displays the amount of time the audit system is configured to retain audit log files. The audit system will not delete logs until the specified condition has been met. To view the current setting, run the following command:
#
/usr/bin/sudo /usr/bin/grep ^expire-after /etc/security/audit_control
#
#If this returns no results, or does not contain "7d" or a larger value, this is a finding.
#
#Fix Text: Edit the "/etc/security/audit_control" file and change the value for "expire-after" to the amount of time audit logs should be kept for the system. Use the following command to set the "expire-after" value to "7d":
#
#/usr/bin/sudo /usr/bin/sed -i.bak 's/.*expire-after.*/expire-after:7d/' /etc/security/audit_control; /usr/bin/sudo /usr/sbin/audit -s
#
#A text editor may also be used to implement the required updates to the "/etc/security/audit_control" file.


#----------------------------------------------------------------------
#V-95533
echo "V-95533"
#Check Text: For each listing, with the exception of "Shared", verify that the directory is owned by the username, that only the owner has "write" permissions, and the correct Access Control Entry is listed.
#
#To verify permissions on users' home directories, use the following command:

ls -le /Users

#drwxr-xr-x+ 12 Guest _guest 384 Apr 2 09:40 Guest

#0: group:everyone deny delete

#drwxrwxrwt 4 root wheel 128 Mar 28 05:53 Shared

#drwxr-xr-x+ 13 admin staff 416 Apr 8 08:58 admin

#0: group:everyone deny delete

#drwxr-xr-x+ 11 test user 352 Apr 8 09:00 test

#0: group:everyone deny delete

#If the directory is not owned by the user, this is a finding.
#If anyone other than the user has "write" permissions to the directory, this is a finding.
#If the Access Control Entry listed is not "0: group:everyone deny delete", this is a finding.
#
#Fix Text: To reset the permissions on a users' home directory to their defaults, run the following command, where "username" is the user's short name:
#
#sudo diskutil resetUserPermissions / username

#----------------------------------------------------------------------
#V-95537
echo "V-95537"
#Check Text: To check if the system is configured to prohibit user installation of software, first check to ensure the Parental Controls are enabled with the following command:
#
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep -A 6 familyControlsEnabled | grep ì/Users"
#
#If the result is null, or does not contain ì/Users/ì, this is a finding.
#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#----------------------------------------------------------------------
#V-95541
echo "V-95541"
#Check Text: To check that macOS is configured to require authentication to all system preference panes, use the following commands:
#
/usr/bin/sudo /usr/bin/security authorizationdb read system.preferences | grep -A1 shared
#
#If what is returned does not include the following, this is a finding.
#<key>shared</key>
#<false/>
#
#Fix Text: To ensure that authentication is required to access all system level preference panes use the following procedure:
#Copy the authorization database to a file using the following command:
#/usr/bin/sudo /usr/bin/security authorizationdb read system.preferences > ~/Desktop/authdb.txt
#edit the file to change:
#<key>shared</key>
#<true/>
#To read:
#<key>shared</key>
#<false/>
#
#Reload the authorization database with the following command:
#/usr/bin/sudo /usr/bin/security authorizationdb write system.preferences < ~/Desktop/authdb.txt

#----------------------------------------------------------------------
#V-95565 MultiFactor Authentication
echo "V-95565"
#Check Text: If the system is connected to a directory server, this is Not Applicable.
#
#To verify that the system is configured to enforce multi-factor authentication, run the following commands:
#
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep enforceSmartCard
#
#If the results do not show the following, this is a finding.
#"enforceSmartCard=1.
#
#Run the following command to disable password based authentication in SSHD.
#
/usr/bin/grep -e ^[\#]*PasswordAuthentication.* -e ^[\#]*ChallengeResponseAuthentication.* /etc/ssh/sshd_config
#
#If this command returns null, or anything other than exactly this text, with no leading hash(#), this is a finding:
#"PasswordAuthentication no
#ChallengeResponseAuthentication no"
#
#Fix Text: For non directory bound systems, this setting is enforced using the "Smart Card Policy" configuration profile. 
#Note: Before applying the "Smart Card Policy", the supplemental guidance provided with the STIG should be consulted to ensure continued access to the operating system.
#The following commands must be run to disable passcode based authentication for SSHD:
#
#/usr/bin/sudo /usr/bin/sed -i.bak 's/^[\#]*ChallengeResponseAuthentication.*/ChallengeResponseAuthentication no/' /etc/ssh/sshd_config
#/usr/bin/sudo /usr/bin/sed -i.bak 's/^[\#]*PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config

#----------------------------------------------------------------------
#V-95585 WIFI disabled
echo "V-95585"
#Check Text: For systems where Wi-Fi is not approved for use, run the following command to disable the Wi-Fi service:
#
#To list the network devices that are enabled on the system, run the following command:

/usr/bin/sudo /usr/sbin/networksetup -listallnetworkservices

#If the Wi-Fi service name is not preceded by an asterisk(*), this is a finding.
#Fix Text: To disable a network device, run the following command:
#/usr/bin/sudo /usr/sbin/networksetup -setnetworkserviceenabled Wi-Fi off

#----------------------------------------------------------------------
#V-95597
echo "V-95597"
#Check Text: Ensure that only one FileVault user is defined:
#
# sudo fdesetup list

fvuser,85F41F44-22B3-6CB7-85A1-BCC2EA2B887A

#If more than one user is defined, this is a finding.
#Verify that the defined FileVault user has been disabled:
#
# sudo dscl . read /Users/<FileVault_User> AuthenticationAuthority | grep "DisabledUser"

#AuthenticationAuthority: ;ShadowHash;HASHLIST:<SALTED-SHA512-PBKDF2,SRP-RFC5054-4096-SHA512-PBKDF2> ;Kerberosv5;;unlock@LKDC:SHA1.20BABA05A6B1A86A8C57581A8487596640A3E37B;LKDC:SHA1.20CEBE04A5B1D92D8C58189D8487593350D3A40A; ;SecureToken; DisabledUser
#If the FileVault user is not disabled, this is a finding.
#Verify that password forwarding has been disabled on the system:

# sudo defaults read /Library/Preferences/com.apple.loginwindow | grep "DisableFDEAutologin"

#DisableFDEAutologin = 1;

#If "DisableFDEAutologin" is not set to a value of "1", this is a finding.

#Fix Text: Create a new user account that will be used to unlock the disk on startup.
#Disable the login ability of the newly created user account:

# sudo dscl . append /Users/<FileVault_User> AuthenticationAuthority DisabledUser
#Disable FileVaults Auto-login feature:

# sudo defaults write /Library/Preferences/com.apple.loginwindow DisableFDEAutologin -bool YES
#Remove all FileVault login access from each user account defined on the system that is not the designated FileVault user:

# sudo fdesetup remove -user <username>

#----------------------------------------------------------------------
#V-95787
echo "V-95787"
#Check Text: To check if the system is configured to prevent Apple Watch from terminating a session lock, run the following command:

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep "allowAutoUnlock = 0;"

#If there is no result, this is a finding.
#Fix Text: This setting is enforced using the ìRestrictions Policy" configuration profile.

#----------------------------------------------------------------------
#V-95789
echo "V-95789"
#Check Text: To check if the system will prompt users to enter their passwords to unlock the screen saver, run the following command:

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep askForPassword

#If there is no result, or if "askForPassword" is not set to "1", this is a finding.
#Fix Text: This setting is enforced using the "Login Window Policy" configuration profile.

#----------------------------------------------------------------------
#V-95791
echo "V-95791"
#Check Text: To check if the system will prompt users to enter their passwords to unlock the screen saver, run the following command:

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep askForPasswordDelay

#If there is no result, or if "askForPasswordDelay" is not set to "5.0" or less, this is a finding.
#Fix Text: This setting is enforced using the "Login Window Policy" configuration profile.

#----------------------------------------------------------------------
#V-95793
echo "V-95793"
#Check Text: To check if the system has a configuration profile configured to enable the screen saver after a time-out period, run the following command:

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep idleTime

#If there is no result, or if "idleTime" is not set to "900" seconds or less, this is a finding.
#Fix Text: This setting is enforced using the "Login Window Policy" configuration profile.


#----------------------------------------------------------------------
#V-95795
echo "V-95795"
#Check Text: To check if support for session locking with removal of a token is enabled, run the following command:

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep "tokenRemovalAction = 1;"

#If there is no result, this is a finding.
#Fix Text: This setting is enforced using the "Smart Card Policy" configuration profile. 
#Note: Before applying the "Smart Card Policy", the supplemental guidance provided with the STIG should be consulted to ensure continued access to the operating system.

#----------------------------------------------------------------------
#V-95799
echo "V-95799"
#Check Text: To check if the system is configured to disable hot corners, run the following commands:

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep wvous

#If the return is null or does not equal the following, this is a finding:
#"wvous-bl-corner = 0
#wvous-br-corner = 0;
#wvous-tl-corner = 0;
#wvous-tr-corner = 0;"
#
#Fix Text: This setting is enforced using the "Custom Policy" configuration profile.

#----------------------------------------------------------------------
#V-95801 WIFI SUPPORT SOFTWARE DISABLED
echo "V-95801"
#Check Text: If the system requires Wi-Fi to connect to an authorized network, this is Not Applicable.
#To check if the Wi-Fi network device is disabled, run the following command:

/usr/bin/sudo /usr/sbin/networksetup -listallnetworkservices

#A disabled device will have an asterisk in front of its name.
#If the Wi-Fi device is missing this asterisk, this is a finding.
#Fix Text: To disable the Wi-Fi network device, run the following command:
#/usr/bin/sudo /usr/sbin/networksetup -setnetworkserviceenabled "Wi-Fi" off

#----------------------------------------------------------------------
#V-95805
echo "V-95805"
#Check Text: Verify if a password policy is enforced by a directory service by asking the System Administrator (SA) or Information System Security Officer (ISSO). 
#If no policy is enforced by a directory service, a password policy can be set with the "pwpolicy" utility. The variable names may vary depending on how the policy was set. 
#If there are no temporary accounts defined on the system, this is Not Applicable.
#To check if the password policy is configured to disable a temporary account after 72 hours, run the following command to output the password policy to the screen, substituting the correct user name in place of username:

/usr/bin/sudo /usr/bin/pwpolicy -u username getaccountpolicies | tail -n +2

#If there is no output, and password policy is not controlled by a directory service, this is a finding.
#Otherwise, look for the line "<key>policyCategoryAuthentication</key>".
#
#In the array that follows, there should be a <dict> section that contains a check <string> that allows users to log in if "policyAttributeCurrentTime" is less than the result of adding "policyAttributeCreationTime" to 72 hours (259299 seconds). The check might use a variable #defined in its "policyParameters" section.
#If the check does not exist or if the check adds too great an amount of time to "policyAttributeCreationTime", this is a finding.
#
#Fix Text: This setting may be enforced using local policy or by a directory service.
#
#To set local policy to disable a temporary user, create a plain text file containing the following:
#
#<dict>
#<key>policyCategoryAuthentication</key>
#<array>
#<dict>
#<key>policyContent</key>
#<string>policyAttributeCurrentTime < policyAttributeCreationTime+259299</string>
#<key>policyIdentifier</key>
#<string>Disable Tmp Accounts </string>
#</dict>
#</array>
#</dict>
#
#After saving the file and exiting to the command prompt, run the following command to load the new policy file, substituting the correct user name in place of "username" and the path to the file in place of "/path/to/file".
#/usr/bin/sudo /usr/bin/pwpolicy -u username setaccountpolicies /path/to/file

#----------------------------------------------------------------------
#V-95807
echo "V-95807"
#Check Text: If an emergency account has been created on the system, check the expiration settings of a local account using the following command, replacing "username" with the correct value:

/usr/bin/sudo /usr/bin/pwpolicy -u username getaccountpolicies | tail -n +2

#If there is output, verify that the account policies do not restrict the ability to log in after a certain date or amount of time.
#If they do, this is a finding.
#
#Fix Text: To remove all "pwpolicy" settings for an emergency account, run the following command, replacing "username" with the correct value:
#/usr/bin/sudo /usr/bin/pwpolicy -u username clearaccountpolicies
#Otherwise, to change the passcode policy for an emergency account and only remove some policy sections, run the following command to save a copy of the current policy file for the specified username:
#/usr/bin/sudo /usr/bin/pwpolicy -u username getaccountpolicies | tail -n +2 > pwpolicy.plist
#Open the resulting passcode policy file in a text editor and remove any policyContent sections that would restrict the ability to log in after a certain date or amount of time.
#To remove the section cleanly, remove the entire text that begins with <dict>, contains <key>policyContent<'/key>, and ends with </dict>.
#After saving the file and exiting to the command prompt, run the following command to load the new policy file:
#/usr/bin/sudo /usr/bin/pwpolicy -u username setaccountpolicies pwpolicy.plist

#----------------------------------------------------------------------

#V-95809
echo "V-95809"
#Check Text: The TIMED (NTP replacement in Mojave) service must be enabled on all networked systems. To check if the service is running, use the following command:

sudo systemsetup -getusingnetworktime

#If the following in not returned, this is a finding:
#Network Time: On
#
#To verify that an authorized Time Server is configured, run the following command:

systemsetup -getnetworktimeserver

#Only approved time servers should be configured for use.
#If no server is configured, or if an unapproved time server is in use, this is a finding.
#
#Fix Text: To enable the TIMED service, run the following command:
#/usr/bin/sudo systemsetup -setusingnetworktime on
#To configure a time server, use the following command:
#/usr/bin/sudo systemsetup -setnetworktimeserver "server"

#----------------------------------------------------------------------
#V-95811
echo "V-95811 - Verify Approved HBSS solution Installed on system"
#Check Text: Verify that there is an approved HBSS solution installed on the system.
#If there is not an approved HBSS solution installed, this is a finding.
#Verify that all installed components of the HBSS Solution are at the DoD approved minimal version.
#If the installed components are not at the DoD approved minimal versions, this is a finding.
#Fix Text: Install an approved HBSS solution onto the system and ensure that all components are at least updated to their DoD approved minimal versions.

#----------------------------------------------------------------------
#V-95813
echo "V-95813"
#Check Text: The password policy is set with a configuration profile. Run the following command to check if the system has the correct setting for the number of permitted failed logon attempts:

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep maxFailedAttempts

#If the return is null, or not, ìmaxFailedAttempts = 3î, this is a finding.
#Fix Text: This setting is enforced using the ìPasscode Policy" configuration profile.

#----------------------------------------------------------------------
#V-95815
echo "V-95815"
#Check Text: Password policy can be set with a configuration profile or the "pwpolicy" utility. If password policy is set with a configuration profile, run the following command to check if the system has the correct setting for the logon reset timer:

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep minutesUntilFailedLoginReset

#If the return is null or not ìminutesUntilFailedLoginReset = 15î, this is a finding.
#
#If password policy is set with the "pwpolicy" utility, the variable names may vary depending on how the policy was set. To check if the password policy is configured to disable an account for 15 minutes after 3 unsuccessful logon attempts, run the following command to output the #password policy to the screen:

/usr/bin/sudo /usr/bin/pwpolicy getaccountpolicies

#Look for the line "<key>policyCategoryAuthentication</key>".
#If this does not exist, and password policy is not controlled by a directory service, this is a finding.
#
#In the array that follows, there should one or more <dict> sections that describe policy checks. One should contain a <string> that allows users to log on if "policyAttributeFailedAuthentications" is less than "policyAttributeMaximumFailedAuthentications". Under policyParameters, #"policyAttributeMaximumFailedAuthentications" should be set to "3".
#
#If "policyAttributeMaximumFailedAuthentications" is not set to "3", this is a finding.
#
#In the same check or in another <dict> section, there should be a <string> that allows users to log on if the "policyAttributeCurrentTime" is greater than the result of adding "15" minutes (900 seconds) to "policyAttributeLastFailedAuthenticationTime". The check might use a #variable defined in its "policyParameters" section.
#
#If the check does not exist or if the check adds too great an amount of time, this is a finding.
#
#Fix Text: This setting may be enforced using the "Passcode Policy" configuration profile or by a directory service.
#
#The following two lines within the configuration enforce lockout expiration to "15" minutes:
#
#<key>autoEnableInSeconds</key>
#<integer>900</integer>
#
#To set the passcode policy without a configuration profile, run the following command to save a copy of the current "pwpolicy" account policy file:
#
#/usr/bin/sudo /usr/bin/pwpolicy getaccountpolicies | tail -n +2 > pwpolicy.plist
#
#Open the generated file in a text editor and ensure it contains the following text after the opening <dict> tag and before the closing </dict> tag.
#
#Replace <dict/> first with <dict></dict> if necessary.
#
#<key>policyCategoryAuthentication</key>
#<array>
#<dict>
#<key>policyContent</key>
#<string>(policyAttributeFailedAuthentications < policyAttributeMaximumFailedAuthentications) OR (policyAttributeCurrentTime > (policyAttributeLastFailedAuthenticationTime + autoEnableInSeconds))</string>
#<key>policyIdentifier</key>
#<string>Authentication Lockout</string>
#<key>policyParameters</key>
#<dict>
#<key>autoEnableInSeconds</key>
#<integer>900</integer>
#<key>policyAttributeMaximumFailedAuthentications</key>
#<integer>3</integer>
#</dict>
#</dict>
#</array>
#
#If the line "<key>policyCategoryAuthentication</key>" already exists, the following text should be used instead and inserted after the first <array> tag that follows it:
#
#<dict>
#<key>policyContent</key>
#<string>(policyAttributeFailedAuthentications < policyAttributeMaximumFailedAuthentications) OR (policyAttributeCurrentTime > (policyAttributeLastFailedAuthenticationTime + autoEnableInSeconds))</string>
#<key>policyIdentifier</key>
#<string>Authentication Lockout</string>
#<key>policyParameters</key>
#<dict>
#<key>autoEnableInSeconds</key>
#<integer>900</integer>
#<key>policyAttributeMaximumFailedAuthentications</key>
#<integer>3</integer>
#</dict>
#</dict>
#
#After saving the file and exiting to the command prompt, run the following command to load the new policy file:
#
#/usr/bin/sudo /usr/bin/pwpolicy setaccountpolicies pwpolicy.plist
#
#Note: Updates to passcode restrictions must be thoroughly evaluated in a test environment. Mistakes in configuration may block password change and local user creation operations, as well as lock out all local users, including administrators.

#----------------------------------------------------------------------
#V-95817
echo "V-95817"
#Check Text: Verify the operating system displays the Standard Mandatory DoD Notice and Consent Banner before granting access to the operating system.
#Check to see if the operating system has the correct text listed in the "/etc/banner" file with the following command:
 
 more /etc/banner

#The command should return the following text:
#"You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.
# By using this IS (which includes any device attached to this IS), you consent to the following conditions:
#-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.
#-At any time, the USG may inspect and seize data stored on this IS.
#-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.
#-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.
#-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and # their assistants. Such communications and work product are private and confidential. See User Agreement for details."
#
#If the operating system does not display a graphical logon banner or the banner does not match the Standard Mandatory DoD Notice and Consent Banner, this is a finding.
#If the text in the "/etc/banner" file does not match the Standard Mandatory DoD Notice and Consent Banner, this is a finding.
#
#Fix Text: Create a text file containing the required DoD text.
#
#Name the file "banner" and place it in "/etc/".

#----------------------------------------------------------------------
#V-95819
echo "V-95819"
#Check Text: For systems that allow remote access through SSH, run the following command to verify that "/etc/banner" is displayed before granting access:

 /usr/bin/grep Banner /etc/ssh/sshd_config

#If the sshd Banner configuration option does not point to "/etc/banner", this is a finding.
#
#Fix Text: For systems that allow remote access through SSH, modify the "/etc/ssh/sshd_config" file to add or update the following line:
# Banner /etc/banner

#----------------------------------------------------------------------
#V-95821
echo "V-95821"
#Check Text: The policy banner will show if a "PolicyBanner.rtf" or "PolicyBanner.rtfd" exists in the "/Library/Security" folder. Run this command to show the contents of that folder:

/bin/ls -l /Library/Security/PolicyBanner.rtf*

#If neither "PolicyBanner.rtf" nor "PolicyBanner.rtfd" exists, this is a finding. 
#The banner text of the document MUST read:
#
#"You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only. By using this IS (which includes any device attached to this IS), you consent to the following conditions:
#-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.
#-At any time, the USG may inspect and seize data stored on this IS.
#-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG authorized purpose.
#-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.
#-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and #their assistants. Such communications and work product are private and confidential. See User Agreement for details."
#
#If the text is not worded exactly this way, this is a finding.
#
#Fix Text: Create an RTF file containing the required text. Name the file "PolicyBanner.rtf" or "PolicyBanner.rtfd" and place it in "/Library/Security/".

#----------------------------------------------------------------------
#V-95823
echo "V-95823"
#Check Text: To check if a log file contains ACLs, run the following commands:

/usr/bin/sudo ls -le $(/usr/bin/sudo /usr/bin/grep '^dir' /etc/security/audit_control | awk -F: '{print $2}') | /usr/bin/grep -v current

#In the output from the above commands, ACLs will be listed under any file that may contain them (e.g., "0: group:admin allow list,readattr,reaadextattr,readsecurity").
#If any such line exists, this is a finding.
#Fix Text: For any log file that contains ACLs, run the following command:
#/usr/bin/sudo chmod -N [audit log file]

#----------------------------------------------------------------------
#V-95825
echo "V-95825"
#Check Text: To check if a log folder contains ACLs, run the following commands:

/usr/bin/sudo ls -lde $(/usr/bin/sudo /usr/bin/grep '^dir' /etc/security/audit_control | awk -F: '{print $2}')

#In the output from the above commands, ACLs will be listed under any folder that may contain them (e.g., "0: group:admin allow list,readattr,reaadextattr,readsecurity").
#If any such line exists, this is a finding.
#Fix Text: For any log folder that contains ACLs, run the following command:
#/usr/bin/sudo chmod -N [audit log folder]

#----------------------------------------------------------------------
#V-95827
echo "V-95827"
#Check Text: The SSH daemon "ClientAliveInterval" option must be set correctly. To check the idle timeout setting for SSH sessions, run the following:

/usr/bin/sudo /usr/bin/grep ^ClientAliveInterval /etc/ssh/sshd_config

#If the setting is not "900" or less, this is a finding.
#Fix Text: To ensure that "ClientAliveInterval" is set correctly, run the following command:
#/usr/bin/sudo /usr/bin/sed -i.bak 's/.*ClientAliveInterval.*/ClientAliveInterval 900/' /etc/ssh/sshd_config

#----------------------------------------------------------------------
#V-95829
echo "V-95829"
#Check Text: The SSH daemon "ClientAliveCountMax" option must be set correctly. To verify the SSH idle timeout will occur when the "ClientAliveCountMax" is set, run the following command:

/usr/bin/sudo /usr/bin/grep ^ClientAliveCountMax /etc/ssh/sshd_config

#If the setting is not "ClientAliveCountMax 0", this is a finding.
#Fix Text: To ensure that the SSH idle timeout occurs precisely when the "ClientAliveCountMax" is set, run the following command:
#/usr/bin/sudo /usr/bin/sed -i.bak 's/.*ClientAliveCountMax.*/ClientAliveCountMax 0/' /etc/ssh/sshd_config

#----------------------------------------------------------------------
#V-95831
echo "V-95831"
#Check Text: The SSH daemon "LoginGraceTime" must be set correctly. To check the amount of time that a user can log on through SSH, run the following command:

/usr/bin/sudo /usr/bin/grep ^LoginGraceTime /etc/ssh/sshd_config

#If the value is not set to "30" or less, this is a finding.
#Fix Text: To ensure that "LoginGraceTime" is configured correctly, run the following command:
#/usr/bin/sudo /usr/bin/sed -i.bak 's/.*LoginGraceTime.*/LoginGraceTime 30/' /etc/ssh/sshd_config

#----------------------------------------------------------------------
#V-95833
echo "V-95833"
#Check Text: To view the currently configured flags for the audit daemon, run the following command:

/usr/bin/sudo /usr/bin/grep ^flags /etc/security/audit_control

#Administrative and Privileged access, including administrative use of the command line tools "kextload" and "kextunload" and changes to configuration settings are logged by way of the "ad" flag.
#If "ad" is not listed in the result of the check, this is a finding.
#Fix Text: To ensure the appropriate flags are enabled for auditing, run the following command:
#/usr/bin/sudo /usr/bin/sed -i.bak '/^flags/ s/$/,ad/' /etc/security/audit_control; /usr/bin/sudo /usr/sbin/audit -s
#A text editor may also be used to implement the required updates to the "/etc/security/audit_control" file.


#----------------------------------------------------------------------
#V-95835
echo "V-95835"
#Check Text: To view the currently configured flags for the audit daemon, run the following command:

/usr/bin/sudo /usr/bin/grep ^flags /etc/security/audit_control

#Attempts to log in as another user are logged by way of the "lo" flag.
#If "lo" is not listed in the result of the check, this is a finding.
#Fix Text: To ensure the appropriate flags are enabled for auditing, run the following command:
#/usr/bin/sudo sed -i.bak '/^flags/ s/$/,lo/' /etc/security/audit_control; /usr/bin/sudo /usr/sbin/audit -s
#A text editor may also be used to implement the required updates to the "/etc/security/audit_control" file.

#----------------------------------------------------------------------
#V-95837
echo "V-95837"
#Check Text: To check if the audit service is running, use the following command:

launchctl print-disabled system| grep auditd

#If the return is not:
#"com.apple.auditd" => false"
#the audit service is disabled, and this is a finding.
#Fix Text: To enable the audit service, run the following command:
#/usr/bin/sudo /bin/launchctl enable system/com.apple.auditd
#The system may need to be restarted for the update to take effect.

#----------------------------------------------------------------------
#V-95839
echo "V-95839"
#Check Text: To view the setting for the audit control system, run the following command:

sudo /usr/bin/grep ^policy /etc/security/audit_control | /usr/bin/grep ahlt

#If there is no result, this is a finding.
#Fix Text: Edit the "/etc/security/audit_control file" and change the value for policy to include the setting "ahlt". To do this programmatically, run the following command:
#sudo /usr/bin/sed -i.bak '/^policy/ s/$/,ahlt/' /etc/security/audit_control; sudo /usr/sbin/audit -s

#----------------------------------------------------------------------
#V-95841
echo "V-95841"
#Check Text: To check the ownership of the audit log files, run the following command:

/usr/bin/sudo ls -le $(/usr/bin/sudo /usr/bin/grep '^dir' /etc/security/audit_control | awk -F: '{print $2}') | grep -v current

#The results should show the owner (third column) to be "root". 
#If they do not, this is a finding.
#Fix Text: For any log file that returns an incorrect owner, run the following command:
#/usr/bin/sudo chown root [audit log file]
#[audit log file] is the full path to the log file in question.


#----------------------------------------------------------------------
#V-95843
echo "V-95843"
#Check Text: To check the ownership of the audit log folder, run the following command:

/usr/bin/sudo ls -lde $(/usr/bin/sudo /usr/bin/grep '^dir' /etc/security/audit_control | awk -F: '{print $2}')

#The results should show the owner (third column) to be "root". 
#If it does not, this is a finding.
#Fix Text: For any log folder that has an incorrect owner, run the following command:
#/usr/bin/sudo chown root [audit log folder]

#----------------------------------------------------------------------
#V-95845
echo "V-95845"
#Check Text: To check the group ownership of the audit log files, run the following command:

/usr/bin/sudo ls -le $(/usr/bin/sudo /usr/bin/grep '^dir' /etc/security/audit_control | awk -F: '{print $2}') | /usr/bin/grep -v current

#The results should show the group owner (fourth column) to be "wheel". 
#If they do not, this is a finding.
#Fix Text: For any log file that returns an incorrect group owner, run the following command:
#/usr/bin/sudo chgrp wheel [audit log file]
#[audit log file] is the full path to the log file in question.

#----------------------------------------------------------------------
#V-95847
echo "V-95847"
#Check Text: To check the group ownership of the audit log folder, run the following command:

/usr/bin/sudo ls -lde $(/usr/bin/sudo /usr/bin/grep '^dir' /etc/security/audit_control | awk -F: '{print $2}')

#The results should show the group (fourth column) to be "wheel".
#If they do not, this is a finding.
#Fix Text: For any log folder that has an incorrect group, run the following command:
#/usr/bin/sudo chgrp wheel [audit log folder]

#----------------------------------------------------------------------
#V-95849
echo "V-95849"
#Check Text: To check the permissions of the audit log files, run the following command:

/usr/bin/sudo ls -le $(/usr/bin/sudo /usr/bin/grep '^dir' /etc/security/audit_control | awk -F: '{print $2}') | /usr/bin/grep -v current

#The results should show the permissions (first column) to be "440" or less permissive.
#If they do not, this is a finding.
#Fix Text: For any log file that returns an incorrect permission value, run the following command:
#/usr/bin/sudo chmod 440 [audit log file]
#[audit log file] is the full path to the log file in question.

#----------------------------------------------------------------------
#V-95851
echo "V-95851"
#Check Text: To check the permissions of the audit log folder, run the following command:

/usr/bin/sudo ls -lde $(/usr/bin/sudo /usr/bin/grep '^dir' /etc/security/audit_control | awk -F: '{print $2}')

#The results should show the permissions (first column) to be "700" or less permissive.
#if they do not, this is a finding.
#Fix Text: For any log folder that returns an incorrect permission value, run the following command:
#/usr/bin/sudo chmod 700 [audit log folder]

#----------------------------------------------------------------------
#V-95853
echo "V-95853"
#Check Text: To view the currently configured flags for the audit daemon, run the following command:

/usr/bin/sudo /usr/bin/grep ^flags /etc/security/audit_control

#Enforcement actions are logged by way of the "fm" flag, which audits permission changes, and "-fr" and "-fw", which denote failed attempts to read or write to a file.
#If "fm", "-fr", and "-fw" are not listed in the result of the check, this is a finding.
#
#Fix Text: To set the audit flags to the recommended setting, run the following command to add the flags "fm", "-fr", and "-fw" all at once:
#/usr/bin/sudo /usr/bin/sed -i.bak '/^flags/ s/$/,fm,-fr,-fw/' /etc/security/audit_control; /usr/bin/sudo /usr/sbin/audit -s
#A text editor may also be used to implement the required updates to the "/etc/security/audit_control" file.

#----------------------------------------------------------------------
#V-95855
echo "V-95855"
#Check Text: The check displays the "% free" to leave available for the system. The audit system will not write logs if the volume has less than this percentage of free disk space. To view the current setting, run the following command:

/usr/bin/sudo /usr/bin/grep ^minfree /etc/security/audit_control

#If this returns no results, or does not contain "25", this is a finding.
#Fix Text: Edit the "/etc/security/audit_control" file and change the value for "minfree" to "25" using the following command:
#/usr/bin/sudo /usr/bin/sed -i.bak 's/.*minfree.*/minfree:25/' /etc/security/audit_control; /usr/bin/sudo /usr/sbin/audit -s
#A text editor may also be used to implement the required updates to the "/etc/security/audit_control file".

#----------------------------------------------------------------------
#V-95857
echo "V-95857"
#Check Text: By default, "auditd" only logs errors to "syslog". To see if audit has been configured to print error messages to the console, run the following command:

/usr/bin/sudo /usr/bin/grep logger /etc/security/audit_warn

#If the argument "-s" is missing, or if "audit_warn" has not been otherwise modified to print errors to the console or send email alerts to the SA and ISSO, this is a finding.
#Fix Text: To make "auditd" log errors to standard error as well as "syslogd", run the following command:
#/usr/bin/sudo /usr/bin/sed -i.bak 's/logger -p/logger -s -p/' /etc/security/audit_warn; /usr/bin/sudo /usr/sbin/audit -s

#----------------------------------------------------------------------
#V-95859
echo "V-95859"
#Check Text: To view the currently configured flags for the audit daemon, run the following command:

/usr/bin/sudo /usr/bin/grep ^flags /etc/security/audit_control

#Logon events are logged by way of the "aa" flag.
#If "aa" is not listed in the result of the check, this is a finding.
#
#Fix Text: To ensure the appropriate flags are enabled for auditing, run the following command:
#/usr/bin/sudo /usr/bin/sed -i.bak '/^flags/ s/$/,aa/' /etc/security/audit_control; /usr/bin/sudo /usr/sbin/audit -s
#A text editor may also be used to implement the required updates to the "/etc/security/audit_control" file.

#----------------------------------------------------------------------
#V-95861
echo "V-95861"
#Check Text: To verify that certificate checks are occurring, run the following command.

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep checkCertificateTrust

#If the output is null or the value returned, "checkCertificateTrust = 0", is not equal to (0) or greater, this is a finding.
#
#Fix Text: This setting is enforced using the "Smart Card Policy" configuration profile. 
#Note: Before applying the "Smart Card Policy", the supplemental guidance provided with the STIG should be consulted to ensure continued access to the operating system.

#----------------------------------------------------------------------
#Vul ID: V-95863
/usr/bin/sudo /usr/bin/grep ^PermitRootLogin /etc/ssh/sshd_config

#If there is no result, or the result is set to "yes", this is a finding.

#Fix Text: To ensure that "PermitRootLogin" is disabled by sshd, run the following command:

#/usr/bin/sudo /usr/bin/sed -i.bak 's/^[\#]*PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config

#Vul ID: V-95865	

#To check if the SMB File Sharing service is disabled, use the following command:

/usr/bin/sudo /bin/launchctl print-disabled system | /usr/bin/grep com.apple.smbd

#If the results do not show the following, this is a finding:

#"com.apple.smbd" => true

#Fix Text: To disable the SMB File Sharing service, run the following command:

#/usr/bin/sudo /bin/launchctl disable system/com.apple.smbd


#Vul ID: V-95867	
/usr/bin/sudo /bin/launchctl print-disabled system | /usr/bin/grep com.apple.AppleFileServer

#If the results do not show the following, this is a finding:

#"com.apple.AppleFileServer" => true

#Fix Text: To disable the Apple File (AFP) Sharing service, run the following command:

#/usr/bin/sudo /bin/launchctl disable system/com.apple.AppleFileServer

#Vul ID: V-95869	
#If the NFS daemon is required, this is Not Applicable.

#To check if the NFS daemon is disabled, use the following command:

/usr/bin/sudo /bin/launchctl print-disabled system | /usr/bin/grep com.apple.nfsd

#If the results do not show the following, this is a finding:

#"com.apple.nfsd" => true

#Fix Text: To disable the NFS daemon, run the following command:

#/usr/bin/sudo /bin/launchctl disable system/com.apple.nfsd

#Vul ID: V-95871	
#If Location Services are authorized by the Authorizing Official, this is Not Applicable.

#Verify that Location Services are disabled:

#The setting is found in System Preferences >> Security & Privacy >> Privacy >> Location Services.

#If the box that says "Enable Location Services" is checked, this is a finding.

#Fix Text: Disable the Location Services:

#The setting is found in System Preferences >> Security & Privacy >> Privacy >> Location Services.

#Uncheck the box labeled "Enable Location Services".

#Vul ID: V-95873	

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep NoMulticastAdvertisements

#If the return is not, "NoMulticastAdvertisements = 1", this is a finding.

#Fix Text: This setting is enforced using the "Custom Policy" configuration profile.

#Vul ID: V-95875	
/usr/bin/sudo /bin/launchctl print-disabled system | /usr/bin/grep com.apple.uucp

#If the results do not show the following, this is a finding:

#"com.apple.uucp" => true

#Fix Text: To disable the UUCP service, run the following command:

#/usr/bin/sudo /bin/launchctl disable system/com.apple.uucp

Vul ID: V-95877	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep forceInternetSharingOff

#If the return is not, "forceInternetSharingOff = 1", this is a finding.

#Fix Text: This setting is enforced using the "Custom Policy" configuration profile.

#Vul ID: V-95883	
/usr/bin/sudo /bin/launchctl print-disabled system | /usr/bin/grep org.apache.httpd

#If the results do not show the following, this is a finding:

#"org.apache.httpd" => true

#Fix Text: To disable Web Sharing, run the following command:

#/usr/bin/sudo /bin/launchctl disable system/org.apache.httpd


#Vul ID: V-95901	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep allowCamera

#If the result is not ìallowCamera = 0î, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95903	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep -A 6 DisabledPreferencePanes

#If the return is not an array which contains: ìcom.apple.preferences.internetaccountsî, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95905	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep -A 5 familyControlsEnabled | grep "Mail.app"

#If the return does not contain "/Applications/Mail.app", this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.


#Vul ID: V-95907
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep -e "Assistant Allowed" -e "Ironwood Allowed"

#If the output is not the following, this is a finding:
#ìAssistant Allowed = 0î
#ìIronwood Allowed = 0î

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95909
#To check if a configuration profile is configured to enforce this setting, run the following command:

/usr/bin/sudo /usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep allowDiagnosticSubmission

#If "allowDiagnosticSubmission" is not set to "0", this is a finding.

#Alternately, the setting is found in System Preferences >> Security & Privacy >> Privacy >> Diagnostics & Usage.

#If the box that says "Send diagnostic & usage data to Apple" is checked, this is a finding.

#Fix Text: This setting is enforced using the "Security and Privacy Policy" configuration profile.

#The setting "Send diagnostic & usage data to Apple" is found in System Preferences >> Security & Privacy >> Privacy >> Diagnostics & Usage.

#Uncheck the box that says "Send diagnostic & usage data to Apple."

#To apply the setting from the command line, run the following commands:

#/usr/bin/defaults read "/Library/Application Support/CrashReporter/DiagnosticMessagesHistory.plist" AutoSubmit
#/usr/bin/sudo /usr/bin/defaults write "/Library/Application Support/CrashReporter/DiagnosticMessagesHistory.plist" AutoSubmit -bool false
#/usr/bin/sudo /bin/chmod 644 /Library/Application\ Support/CrashReporter/DiagnosticMessagesHistory.plist
#/usr/bin/sudo /usr/bin/chgrp admin /Library/Application\ Support/CrashReporter/DiagnosticMessagesHistory.plist

#Vul ID: V-95911	
/usr/bin/sudo /bin/launchctl print-disabled system | /usr/bin/grep com.apple.AEServer

#If the results do not show the following, this is a finding.

#"com.apple.AEServer" => true

#Fix Text: To disable Remote Apple Events, run the following command:

#/usr/bin/sudo /bin/launchctl disable system/com.apple.AEServer

#The system may need to be restarted for the update to take effect.

#Vul ID: V-95913	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep -A 5 familyControlsEnabled | grep "Calendar.app"

#If the return does not contain "/Applications/Calendar.app", this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95915	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep -A 6 DisabledPreferencePanes | grep icloud

#If the return is not ìcom.apple.preferences.icloudî, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95917	

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep -A 6 DisabledPreferencePanes

#If the return is not an array which contains: ìcom.apple.preferences.internetaccountsî, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.
#Vul ID: V-95919
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep SkipSiriSetup

#If the return is not ìSkipSiriSetup = 1î, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95921	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep SkipCloudSetup

#If the return is not ìSkipCloudSetup = 1î, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95923	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep SkipPrivacySetup

#If the return is not ìSkipPrivacySetup = 1î, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95925	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep SkipiCloudStorageSetup

#If the return is not ìSkipiCloudStorageSetup = 1î, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95929	

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep SkipSiriSetup

#If the output is null or "SkipSiriSetup" is not set to "1", this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95931	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep allowCloudKeychainSync

#If the output is null or not "allowCloudKeychainSync = 0", this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95933	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep allowCloudDocumentSync

#If the output is null or not "allowCloudDocumentSync = 0", this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95935	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep allowCloudBookmarks

#If the output is null or not "allowCloudBookmarks = 0" this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95937	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep allowCloudPhotoLibrary

#If the output is null or not "allowCloudPhotoLibrary = 0", this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95939	

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep allowCloudDocumentSync

#If the output is null or not "allowCloudDocumentSync = 0", this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.

#Vul ID: V-95941	
/usr/bin/sudo /bin/launchctl print-disabled system | /usr/bin/grep com.apple.screensharing

#If the results do not show the following, this is a finding:

#"com.apple.screensharing" => true

#Fix Text: To disable the Screen Sharing service, run the following command:

#/usr/bin/sudo /bin/launchctl disable system/com.apple.screensharing

#The system may need to be restarted for the update to take effect.

#Vul ID: V-95943	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep -E '(EnableAssessment | AllowIdentifiedDevelopers)í

#If the return is null, or is not the following, this is a finding:
#AllowIdentifiedDevelopers = 1;
#EnableAssessment = 1;

#Fix Text: This setting is enforced using the "RestrictionsPolicy" configuration profile.

#Vul ID: V-95945

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep DisableOverride

#If the return is null or is not the following, this is a finding:
#DisableOverride = 1;

#Fix Text: This setting is enforced using the "RestrictionsPolicy" configuration profile.

#Vul ID: V-95953
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep DisableAutoLoginClient

#If "com.apple.login.mcx.DisableAutoLoginClient" is not set to "1", this is a finding.

#Fix Text: This setting is enforced using the "Login Window Policy" configuration profile.

#Vul ID: V-95955	
ls -le /Users

#Should return a listing of the permissions of the root of every user account configured on the system. For each of the users, the permissions should be:
#"drwxr-xr-x+" with the user listed as the owner and the group listed as "staff". The plus (+) sign indicates an associated Access Control List, which should be:
#0: group:everyone deny delete

#For every authorized user account, also run the following command:
/usr/bin/sudo ls -le /Users/userid, where userid is an existing user. 

#This command will return the permissions of all of the objects under the users' home directory. The permissions for each of the subdirectories should be:
#drwx------+ 
#0: group:everyone deny delete

#With the exception of the "Public" directory, whose permissions should match the following:
#drwxr-xr-x+ 
#0: group:everyone deny delete

#If the permissions returned by either of these checks differ from what is shown, this is a finding.

#Fix Text: To ensure the appropriate permissions are set for each user on the system, run the following command:

#diskutil resetUserPermissions / userid, where userid is the user name for the user whose home directory permissions need to be repaired.

#Vul ID: V-95959	

sudo /usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep checkCertificateTrust

#If the return is not "checkCertificateTrust = 1;" with the numeral equal to 1 or greater, this is a finding.

#Fix Text: This setting is enforced using the "Smart Card Policy" configuration profile. 

#Note: Before applying the "Smart Card Policy", the supplemental guidance provided with the STIG should be consulted to ensure continued access to the operating system.


#Vul ID: V-95961	

sudo /usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep enforceSmartCard

#If the return is not "enforceSmartCard = 1;" this is a finding.

#Fix Text: For stand-alone systems, this setting is enforced using the "Smart Card Policy" configuration profile.

#Note: Before applying the "Smart Card Policy", the supplemental guidance provided with the STIG should be consulted to ensure continued access to the operating system.

#Vul ID: V-95963	

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep requireAlphanumeric

#If the return is not ìrequireAlphanumeric = 1î, this is a finding.

#Fix Text: This setting is enforced using the "Passcode Policy" configuration profile.

#Vul ID: V-95965

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep maxPINAgeInDays

#If "maxPINAgeInDays" is set a value greater than "60", this is a finding.

#Fix Text: This setting is enforced using the "Passcode Policy" configuration profile.


#Vul ID: V-95967

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep pinHistory

#If the return is not ìpinHistory = 5î or greater, this is a finding.

#Fix Text: This setting is enforced using the "Passcode Policy" configuration profile.

#Vul ID: V-95969

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep minLength

#If the return is null or not ìminLength = 15î, this is a finding.

#Fix Text: This setting is enforced using the "Passcode Policy" configuration profile.

#Vul ID: V-95971

#Password policy can be set with a configuration profile or the "pwpolicy" utility. If password policy is set with a configuration profile, run the following command to check if the system is configured to require that passwords contain at least one special character:

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep minComplexChars

#If the return is null or not î minComplexChars = 1î, this is a finding.

#Run the following command to check if the system is configured to require that passwords not contain repeated sequential characters or characters in increasing and decreasing sequential order:

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep allowSimple

#If "allowSimple" is not set to "0" or is undefined, this is a finding.

#Fix Text: This setting may be enforced using the "Passcode Policy" configuration profile or by a directory service.


#Vul ID: V-95973	

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep RetriesUntilHint

#If the return is null or is not "RetriesUntilHint = 0", this is a finding.

#Fix Text: This setting is enforce using the "Login Window" Policy.

#Vul ID: V-95975
sudo /usr/sbin/firmwarepasswd -check

#If the return is not, "Password Enabled: Yes", this is a finding.

#Fix Text: To set a firmware passcode use the following command.

#sudo /usr/sbin/firmwarepasswd -setpasswd

#Note: If firmware password or passcode is forgotten, the only way to reset the forgotten password is through the use of a machine specific binary generated and provided by Apple. Schedule a support call, and provide proof of purchase before the firmware binary will be generated.

#Vul ID: V-95977	
#If the system is connected to a directory server, this is Not Applicable.

#The following command ensures that a mandatory smart card policy is enforced:

/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep enforceSmartCard 
enforceSmartCard=1

#If the command returns null, or any other value, this is a finding.

#The following command ensures that passwords are disabled in the SSHD configuration file:

grep -e ^[\#]*PasswordAuthentication.* -e ^[\#]*ChallengeResponseAuthentication.* /etc/ssh/sshd_config
#If this command returns null, or anything other than exactly this text, with no leading hash(#), this is a finding:

#"PasswordAuthentication no
#ChallengeResponseAuthentication no"

#Fix Text: For non-directory bound systems, this setting is enforced using the "Smart Card Policy" configuration profile. 

#Note: Before applying the "Smart Card Policy", the supplemental guidance provided with the STIG should be consulted to ensure continued access to the operating system.

#To ensure that passcode based logins are disabled in sshd, run the following command:

#/usr/bin/sudo /usr/bin/sed -i.bak 's/^[\#]*ChallengeResponseAuthentication.*/ChallengeResponseAuthentication no/' /etc/ssh/sshd_config
#/usr/bin/sudo /usr/bin/sed -i.bak 's/^[\#]*PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config


#Vul ID: V-95979
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep enforceSmartCard 

#If the return is not "enforceSmartCard = 1;" this is a finding.

#Fix Text: This setting is enforced using the "Smart Card Policy" configuration profile. 

#Note: Before applying the "Smart Card Policy", the supplemental guidance provided with the STIG should be consulted to ensure continued access to the operating system.

#Vul ID: V-95981
cat /etc/pam.d/login | grep -i pam_smartcard.so

#If the text that returns does not include the line, "auth sufficient pam_smartcard.so" at the TOP of the listing, this is a finding.

#Fix Text: Make a backup of the PAM LOGIN settings using the following command:
#sudo cp /etc/pam.d/login /etc/pam.d/login_backup_`date "+%Y-%m-%d_%H:%M"`

#Replace the contents of "/etc/pam.d/login" with the following:

# login: auth account password session
#auth sufficient pam_smartcard.so
#auth optional pam_krb5.so use_kcminit
#auth optional pam_ntlm.so try_first_pass
#auth optional pam_mount.so try_first_pass
#auth required pam_opendirectory.so try_first_pass
#auth required pam_deny.so
#account required pam_nologin.so
#account required pam_opendirectory.so
#password required pam_opendirectory.so
#session required pam_launchd.so
#session required pam_uwtmp.so
#session optional pam_mount.so

#Vul ID: V-95983

cat /etc/pam.d/su | grep -i pam_smartcard.so

#If the text that returns does not include the line, "auth sufficient pam_smartcard.so" at the TOP of the listing, this is a finding.

#Fix Text: Make a backup of the PAM SU settings using the following command:
#cp /etc/pam.d/su /etc/pam.d/su_backup_`date "+%Y-%m-%d_%H:%M"`

#Replace the contents of "/etc/pam.d/login" with the following:

# su: auth account session
#auth sufficient pam_smartcard.so 
#auth required pam_opendirectory.so
#auth required pam_deny.so 
#account required pam_permit.so
#password required pam_deny.so
#session required pam_permit.so

#Vul ID: V-95985
cat /etc/pam.d/sudo | grep -i pam_smartcard.so

#If the text that returns does not include the line, "auth sufficient pam_smartcard.so" at the TOP of the listing, this is a finding.

#Fix Text: Make a backup of the PAM SUDO settings using the following command:
#cp /etc/pam.d/login /etc/pam.d/sudo_backup_`date "+%Y-%m-%d_%H:%M"`

#Replace the contents of "/etc/pam.d/login" with the following:

# sudo: auth account password session
#auth sufficient pam_smartcard.so
#auth required pam_opendirectory.so
#auth required pam_deny.so
#account required pam_permit.so
#password required pam_deny.so
#session required pam_permit.so


#Vul ID: V-95987
#These commands check for log files that exist on the system and print out the log with corresponding ownership. Run them from inside "/var/log":

#/usr/bin/sudo stat -f '%Su:%Sg:%N' $(/usr/bin/grep -v '^#' /etc/newsyslog.conf | awk '{ print $1 }') 2> /dev/null
#/usr/bin/sudo stat -f '%Su:%Sg:%N' $(/usr/bin/grep -e '^>' /etc/asl.conf /etc/asl/* | awk '{ print $2 }') 2> /dev/null

#If there are any system log files that are not owned by "root" and group-owned by "wheel" or admin, this is a finding.

#Service logs may be owned by the service user account or group.

#Fix Text: For any log file that returns an incorrect owner or group value, run the following command:

#/usr/bin/sudo chown root:wheel [log file]

#[log file] is the full path to the log file in question. If the file is managed by "newsyslog", find the configuration line in the directory "/etc/newsyslog.d/" or the file "/etc/newsyslog.conf" and ensure that the owner:group column is set to "root:wheel" or the appropriate service user account and group. 

#If the file is managed by "aslmanager", find the configuration line in the directory "/etc/asl/" or the file "/etc/asl.conf" and ensure that "uid" and "gid" options are either not present or are set to a service user account and group respectively.

#Vul ID: V-95989	   	
#These commands check for log files that exist on the system and print out the log with corresponding permissions. Run them from inside "/var/log":

#/usr/bin/sudo stat -f '%A:%N' $(/usr/bin/grep -v '^#' /etc/newsyslog.conf | awk '{ print $1 }') 2> /dev/null
#/usr/bin/sudo stat -f '%A:%N' $(/usr/bin/grep -e '^>' /etc/asl.conf /etc/asl/* | awk '{ print $2 }') 2> /dev/null

#The correct permissions on log files should be "640" or less permissive for system logs. 

#Any file with more permissive settings is a finding.

#Fix Text: For any log file that returns an incorrect permission value, run the following command:

#/usr/bin/sudo chmod 640 [log file]

#[log file] is the full path to the log file in question. If the file is managed by "newsyslog", find the configuration line in the directory "/etc/newsyslog.d/" or the file "/etc/newsyslog.conf" and edit the mode column to be "640" or less permissive. 

#If the file is managed by "aslmanager", find the configuration line in the directory "/etc/asl/" or the file "/etc/asl.conf" and add or edit the mode option to be "mode=0640" or less permissive.

#Vul ID: V-95991

/usr/bin/sudo /bin/launchctl print-disabled system | /usr/bin/grep com.openssh.sshd

#If the results do not show the following, this is a finding.

#"com.openssh.sshd" => false

#Fix Text: To enable the SSH service, run the following command:

#/usr/bin/sudo /bin/launchctl enable system/com.openssh.sshd

#The system may need to be restarted for the update to take effect.

#Vul ID: V-95993

/usr/bin/sudo /bin/launchctl print-disabled system | /usr/bin/grep com.openssh.sshd

#If the results do not show the following, this is a finding.

#"com.openssh.sshd" => false

#Fix Text: To enable the SSHD service, run the following command:

#/usr/bin/sudo /bin/launchctl enable system/com.openssh.sshd

#The system may need to be restarted for the update to take effect.

#Vul ID: V-95995

/usr/bin/csrutil status

#If the result does not show the following, this is a finding.

#System Integrity Protection status: enabled

#Fix Text: To reenable "System Integrity Protection", boot the affected system into "Recovery" mode, launch "Terminal" from the "Utilities" menu, and run the following command:

#/usr/bin/csrutil enable

#Vul ID: V-95997

/usr/bin/sudo /usr/bin/fdesetup status

#If "FileVault" is "Off" and the device is a mobile device or the organization has determined that the drive must encrypt data at rest, this is a finding.

#Fix Text: Open System Preferences >> Security and Privacy and navigate to the "FileVault" tab. Use this panel to configure full-disk encryption.

#Alternately, from the command line, run the following command to enable "FileVault":

#/usr/bin/sudo /usr/bin/fdesetup enable

#After "FileVault" is initially set up, additional users can be added.

#Vul ID: V-95999
/usr/bin/sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate

#If the result is "disabled", this is a finding.

#Fix Text: To enable the firewall, run the following command:

#/usr/bin/sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on

#Vul ID: V-96001
#Install an approved HBSS or firewall solution onto the system and configure it with a "default-deny" policy.

#Modify the check to verify that signed binaries cannot automatically accept connections.

#Update default deny incoming and outgoing with allow for ssh store and activation.




------------------------------------------------------------------------------------
CAT III
------------------------------------------------------------------------------------
#Vul ID: V-95797
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep modulePath

#If there is no result or defined "modulePath", this is a finding.

#Fix Text: This setting is enforced using the "Login Window Policy" configuration profile.

#Vul ID: V-95885	
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep DisableBluetooth

#If the return is not, "DisableBluetooth = 1", this is a finding.

#Fix Text: This setting is enforced using the "Custom Policy" configuration profile.


#Vul ID: V-95887
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep -A 5 familyControlsEnabled | grep "FaceTime"

#If the return does not containî/Applications/FaceTime.appî, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.


#Vul ID: V-95889
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep -A 5 familyControlsEnabled | grep "Messages.app"

#If the return does not contain î/Applications/Messages.appî, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.


#Vul ID: V-95891
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep allowCloudCalendar

#If the return is not ìallowCloudCalendar = 0î, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.


#Vul ID: V-95893
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep allowCloudReminders

#If the return is not ìallowCloudReminders = 0î, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.


#Vul ID: V-95895
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep allowCloudAddressBook

#If the result is not ìallowCloudAddressBook = 0î, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.


#Vul ID: V-95897
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep allowCloudMail

#If the result is not ìallowCloudMail = 0î, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.


#Vul ID: V-95899
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep allowCloudNotes

#If the return is not ìallowCloudNotes = 0î, this is a finding.

#Fix Text: This setting is enforced using the "Restrictions Policy" configuration profile.


#Vul ID: V-95947
/usr/sbin/system_profiler SPConfigurationProfileDataType | /usr/bin/grep DisableBluetooth

#If the return is null or is not "DisableBluetooth = 1", this is a finding.

#Fix Text: This setting is enforced using the "Custom Policy" configuration profile.



